//--------------
//   Key       |
//--------------
A = <Rat18S>
B = <Opt Function Definitions>
C = <Function Definitions>
D = <Function>
E = <Opt Parameter List>
F = <Parameter List>
G = <Parameter>
H = <Qualifier>
I = <Body>
J = <Opt Declaration List>
K = <Declaration List>
L = <Declaration>
M = <IDs>
N = <Statement List>
O = <Statement>
P = <Compound>
Q = <Assign>
R = <If>
S = <Return>
T = <Print>
U = <Scan>
V = <While>
W = <Condition>
X = <Relop>
Y = <Expression>
Z = <Term>
A' = <Factor>
B' = <Primary>
C' = <Empty>

Original Productions:
R1) A -> B %% JN
R2) B -> C | C'
R3) C -> D | DC
R4) D -> function id [ E ] JI
R5) E -> F | C'
R6) F -> G | G,F
R7) G -> M : H
R8) H -> int | boolean | real
R9) I -> {N}
R10) J -> K | C'
R11) K -> L; | L;K
R12) L -> HM
R13) M -> id | id, M
R14) N -> O | ON
R15) O -> P | Q | R | S | T | U | V 
R16) P -> { N }
R17) Q -> id = Y;
R18) R -> if(W)O endif | if(W)O else O endif
R19) S -> return; | return Y;
R20) T -> put(Y);
R21) U -> get(M);
R22) V -> while(W) O
R23) W -> YXY
R24) X -> == | ^= | > | < | => | =<
R25) Y -> Y+Z | Y-Z | Z			<--Direct-left recursion
R26) Z -> Z*A' | Z/A' | A'		<--Direct-left recursion
R27) A' -> -B' | B'
R28) B' -> id | int | id (M) | (Y) | real | true | false 
R29) C' ->


Remove Direct-left recursion:
Y -> ZYprime
Yprime -> +ZYprime | -ZYprime | epsilon

Z -> A'Zprime
Zprime -> *A'Zprime | /A'Zprime | epsilon

-//-------------------------------------------
//    Replace direct-left recursive rules:   |
//--------------------------------------------

R1) A -> B %% JN
R2) B -> C | C'
R3) C -> D | DC
R4) D -> function id [ E ] JI
R5) E -> F | C'
R6) F -> G | G,F
R7) G -> M : H
R8) H -> int | boolean | real
R9) I -> {N}
R10) J -> K | C'
R11) K -> L; | L;K
R12) L -> HM		<-- indirect-left recursion
R13) M -> id | id, M
R14) N -> O | ON
R15) O -> P | Q | R | S | T | U | V 
R16) P -> { N }
R17) Q -> id = Y;
R18) R -> if(W)O endif | if(W)O else O endif
R19) S -> return; | return Y;
R20) T -> put(Y);
R21) U -> get(M);
R22) V -> while(W) O
R23) W -> YXY
R24) X -> == | ^= | > | < | => | =<
R25) Y -> ZYprime
R26) Yprime -> +ZYprime | -ZYprime | epsilon			
R27) Z -> A'Zprime
R28) Zprime -> *A'Zprime | /A'Zprime | epsilon
R29) A' -> -B' | B'
R30) B' -> id | int | id (M) | (Y) | real | true | false 
R31) C' ->


//---------------------------------------
//    Replace indirect-left recursion   |
//---------------------------------------
R1) A -> B %% JN						
R2) B -> C | C'
R3) C -> D | DC					<-- factorize
R4) D -> function id [ E ] JI
R5) E -> F | C'
R6) F -> G | G,F				<-- factorize
R7) G -> M : H
R8) H -> int | boolean | real
R9) I -> { N }
R10) J -> K | C'
R11) K -> L; | L;K				<-- factorize
R12) L -> int M | boolean M | real M
R13) M -> id | id, M				<-- factorize
R14) N -> O | ON				<-- factorize
R15) O -> P | Q | R | S | T | U | V 
R16) P -> { N }
R17) Q -> id = Y;
R18) R -> if(W)O endif | if(W)O else O endif	<-- factorize
R19) S -> return; | return Y;			<-- factorize
R20) T -> put(Y);
R21) U -> get(M);
R22) V -> while(W) O
R24) W -> YXY
R25) X -> == | ^= | > | < | => | =<
R26) Y -> ZYprime
R27) Yprime -> +ZYprime | -ZYprime | epsilon			
R28) Z -> A'Zprime
R29) Zprime -> *A'Zprime | /A'Zprime | epsilon
R30) A' -> -B' | B'
R31) B' -> id | int | id (M) | (Y) | real | true | false 
R32) C' -> 

//---------------------------------------
//       Remove left factorization      |
//---------------------------------------
R1) A -> B %% JN						
R2) B -> C | C'
R3) C -> D Cprime
R4) Cprime -> epsilon | D Cprime
R5) D -> function id [ E ] JI
R6) E -> F | C'
R7) F -> G Fprime
R8) Fprime -> epsilon | ,F
R9) G -> M : H
R10) H -> int | boolean | real
R11) I -> { N }
R12) J -> K | C'
R13) K -> L; Kprime
R14) Kprime -> epsilon | L; Kprime
R15) L -> int M | boolean M | real M
R16) M -> id Mprime
R17) Mprime -> epsilon | ,M
R18) N -> O Nprime
R19) Nprime -> epsilon | O Nprime
R20) O -> P | Q | R | S | T | U | V 
R21) P -> { N }
R22) Q -> id = Y;
R23) R -> if(W)O Rprime
R24) Rprime -> endif | else O endif
R25) S -> return Sprime
R26) Sprime -> ; | Y;
R27) T -> put(Y);
R28) U -> get(M);
R29) V -> while(W) O
R30) W -> YXY
R31) X -> == | ^= | > | < | => | =<
R32) Y -> ZYprime
R33) Yprime -> +ZYprime | -ZYprime | epsilon			
R34) Z -> A'Zprime
R35) Zprime -> *A'Zprime | /A'Zprime | epsilon
R36) A' -> -B' | B'
R37) B' -> id B'prime | int | (Y) | real | true | false
R38) B'prime -> epsilon | (M)
R39) C' -> epsilon


        for line in inFile:
            line = line.rstrip('\n')
            strippedLine = line.lower().split()
            for word in strippedLine:
                if word not in self.notIden and word not in self.operators and word not in self.separators and word not in self.delim and word not in self.keywords:
                    # if the word is already in the dictionary to no re add
                    if word in identifs:
                        print(word + ", identifier already registered")
                    elif word != 'identifier:' and word != 'digit:' and word != 'integer':
                        if word != '0' and  word != '1':
                            # assigning lexemes to dictionary key with memory being the value of the key 
                            lex = word
                            identifs[lex] = memory
                            memory+=1
                if word in identifs.keys():
                    memoryVal= identifs.values()
                    print(word)
                    counter+=1
                    print(counter)
                if word is '=':
                    registers.append('PUSHI')
                if word is '0':
                    data.append('0')
                    registers.append('POPM')
                    data.append(memoryVal)
        s