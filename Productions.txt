//--------------
//   Key       |
//--------------
A = <Rat18S>
B = <Opt Function Definitions>
C = <Function Definitions>
D = <Function>
E = <Opt Parameter List>
F = <Parameter List>
G = <Parameter>
H = <Qualifier>
I = <Body>
J = <Opt Declaration List>
K = <Declaration List>
L = <Declaration>
M = <IDs>
N = <Statement List>
O = <Statement>
P = <Compound>
Q = <Assign>
R = <If>
S = <Return>
T = <Print>
U = <Scan>
V = <While>
W = <Condition>
X = <Relop>
Y = <Expression>
Z = <Term>
A' = <Factor>
B' = <Primary>
C' = <Empty>

Original Productions:
R1) A -> B %% JN
R2) B -> C | C'
R3) C -> D | DC
R4) D -> function id [ E ] JI
R5) E -> F | C'
R6) F -> G | G,F
R7) G -> M : H
R8) H -> int | boolean | real
R9) I -> {N}
R10) J -> K | C'
R11) K -> L; | L;K
R12) L -> HM
R13) M -> id | id, M
R14) N -> O | ON
R15) O -> P | Q | R | S | T | U | V 
R16) P -> { N }
R17) Q -> id = Y;
R18) R -> if(W)O endif | if(W)O else O endif
R19) S -> return; | return Y;
R20) T -> put(Y);
R21) U -> get(M);
R22) V -> while(W) O
R23) W -> YXY
R24) X -> == | ^= | > | < | => | =<
R25) Y -> Y+Z | Y-Z | Z			<--Direct-left recursion
R26) Z -> Z*A' | Z/A' | A'		<--Direct-left recursion
R27) A' -> -B' | B'
R28) B' -> id | int | id (M) | (Y) | real | true | false 
R29) C' ->


Remove Direct-left recursion:
Y -> ZYprime
Yprime -> +ZYprime | -ZYprime | epsilon

Z -> A'Zprime
Zprime -> *A'Zprime | /A'Zprime | epsilon

-//-------------------------------------------
//    Replace direct-left recursive rules:   |
//--------------------------------------------

R1) A -> B %% JN
R2) B -> C | C'
R3) C -> D | DC
R4) D -> function id [ E ] JI
R5) E -> F | C'
R6) F -> G | G,F
R7) G -> M : H
R8) H -> int | boolean | real
R9) I -> {N}
R10) J -> K | C'
R11) K -> L; | L;K
R12) L -> HM		<-- indirect-left recursion
R13) M -> id | id, M
R14) N -> O | ON
R15) O -> P | Q | R | S | T | U | V 
R16) P -> { N }
R17) Q -> id = Y;
R18) R -> if(W)O endif | if(W)O else O endif
R19) S -> return; | return Y;
R20) T -> put(Y);
R21) U -> get(M);
R22) V -> while(W) O
R23) W -> YXY
R24) X -> == | ^= | > | < | => | =<
R25) Y -> ZYprime
R26) Yprime -> +ZYprime | -ZYprime | epsilon			
R27) Z -> A'Zprime
R28) Zprime -> *A'Zprime | /A'Zprime | epsilon
R29) A' -> -B' | B'
R30) B' -> id | int | id (M) | (Y) | real | true | false 
R31) C' ->


//---------------------------------------
//    Replace indirect-left recursion   |
//---------------------------------------
R1) A -> B %% JN						
R2) B -> C | C'
R3) C -> D | DC					<-- factorize
R4) D -> function id [ E ] JI
R5) E -> F | C'
R6) F -> G | G,F				<-- factorize
R7) G -> M : H
R8) H -> int | boolean | real
R9) I -> { N }
R10) J -> K | C'
R11) K -> L; | L;K				<-- factorize
R12) L -> int M | boolean M | real M
R13) M -> id | id, M				<-- factorize
R14) N -> O | ON				<-- factorize
R15) O -> P | Q | R | S | T | U | V 
R16) P -> { N }
R17) Q -> id = Y;
R18) R -> if(W)O endif | if(W)O else O endif	<-- factorize
R19) S -> return; | return Y;			<-- factorize
R20) T -> put(Y);
R21) U -> get(M);
R22) V -> while(W) O
R24) W -> YXY
R25) X -> == | ^= | > | < | => | =<
R26) Y -> ZYprime
R27) Yprime -> +ZYprime | -ZYprime | epsilon			
R28) Z -> A'Zprime
R29) Zprime -> *A'Zprime | /A'Zprime | epsilon
R30) A' -> -B' | B'
R31) B' -> id | int | id (M) | (Y) | real | true | false 
R32) C' -> 

//---------------------------------------
//       Remove left factorization      |
//---------------------------------------
R1) A -> B %% JN						
R2) B -> C | C'
R3) C -> D Cprime
R4) Cprime -> epsilon | D Cprime
R5) D -> function id [ E ] JI
R6) E -> F | C'
R7) F -> G Fprime
R8) Fprime -> epsilon | ,F
R9) G -> M : H
R10) H -> int | boolean | real
R11) I -> { N }
R12) J -> K | C'
R13) K -> L; Kprime
R14) Kprime -> epsilon | L; Kprime
R15) L -> int M | boolean M | real M
R16) M -> id Mprime
R17) Mprime -> epsilon | ,M
R18) N -> O Nprime
R19) Nprime -> epsilon | O Nprime
R20) O -> P | Q | R | S | T | U | V 
R21) P -> { N }
R22) Q -> id = Y;
R23) R -> if(W)O Rprime
R24) Rprime -> endif | else O endif
R25) S -> return Sprime
R26) Sprime -> ; | Y;
R27) T -> put(Y);
R28) U -> get(M);
R29) V -> while(W) O
R30) W -> YXY
R31) X -> == | ^= | > | < | => | =<
R32) Y -> ZYprime
R33) Yprime -> +ZYprime | -ZYprime | epsilon			
R34) Z -> A'Zprime
R35) Zprime -> *A'Zprime | /A'Zprime | epsilon
R36) A' -> -B' | B'
R37) B' -> id B'prime | int | (Y) | real | true | false
R38) B'prime -> epsilon | (M)
R39) C' -> epsilon

-----------------------------------
      Substitute the variables  
-----------------------------------
R1) <Rat18S> -> <Opt Function Definitions> %% <Opt Declaration List><Statement List>					
R2) <Opt Function Definitions> -> <Function Definitions> | <Empty>
R3) <Function Definitions> -> <Function> <Function Definitions Prime>
R4) <Function Definitions Prime> -> epsilon | <Function> <Function Definitions Prime>
R5) <Function> -> function id [<Opt Parameter List>] <Opt Declaration List><Body>
R6) <Opt Parameter List> -> <Parameter List> | <Empty>
R7) <Parameter List> -> <Parameter List> <Parameter List Prime>
R8) <Parameter List Prime> -> epsilon | ,<Parameter List>
R9) <Parameter> -> <IDs> : <Qualifier>
R10) <Qualifier> -> int | boolean | real
R11) <Body> -> { <Statement List> }
R12) <Opt Declaration List> -> <Declaration List> | <Empty>
R13) <Declaration List> -> <Declaration>; <Declaration List Prime>
R14) Kprime -> epsilon | <Declaration>; <Declaration List Prime>
R15) <Declaration> -> int <IDs> | boolean <IDs> | real <IDs>
R16) <IDs> -> id <IDs Prime>
R17) <IDs Prime> -> epsilon | ,<IDs>
R18) <Statement List> -> <Statement> <Statement List Prime>
R19) <Statement List Prime> -> epsilon | <Statement> <Statement List Prime>
R20) <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While> 
R21) <Compound> -> { <Statement List> }
R22) <Assign> -> id = <Expression>;
R23) <If> -> if(<Condition>)<Statement> <If Prime>
R24) <If Prime> -> endif | else <Statement> endif
R25) <Return> -> return <Return Prime>
R26) <Return Prime> -> ; | <Expression>;
R27) <Print> -> put(<Expression>);
R28) <Scan> -> get(<IDs>);
R29) <While> -> while(<Condition>) <Statement>
R30) <Condition> -> <Expression><Relop><Expression>
R31) <Relop> -> == | ^= | > | < | => | =<
R32) <Expression> -> <Term><Expression Prime>
R33) Yprime -> +<Term><Expression Prime> | -<Term><Expression Prime> | epsilon			
R34) <Term> -> <Factor><Term Prime>
R35) <Term Prime> -> *<Factor><Term Prime> | /<Factor><Term Prime> | epsilon
R36) <Factor> -> -<Primary> | <Primary>
R37) <Primary> -> id <Primary Prime> | int | (<Expression>) | real | true | false
R38) B'prime -> epsilon | (<IDs>)
R39) C' -> epsilon
